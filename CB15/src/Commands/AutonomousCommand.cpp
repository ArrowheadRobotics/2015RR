// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "AutonomousCommand.h"



AutonomousCommand::AutonomousCommand() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	counter = 0;
	centerdistance=0;
	startonleft=false;

}

// Called just before this Command runs the first time
void AutonomousCommand::Initialize() {
	centerdistance=0;
	startonleft=false;
	counter=0;
}

// Called repeatedly when this Command is scheduled to run
void AutonomousCommand::Execute() {
	centerdistance=	Robot::table->GetNumber("Midpoint",0);
}

void AutonomousCommand::GoForeward() {
	Robot::chassis->leftDrive->Set(1);
	Robot::chassis->rightDrive->Set(-1);

	//activate pick up mechanism/function
	//pickup activates GoBackward() once done
}

void AutonomousCommand::GoBackward() {
	Robot::chassis->leftDrive->Set(-1);
	Robot::chassis->rightDrive->Set(1);
	counter++;
	if(startonleft==true) {
		Robot::chassis->sideEn->Reset();
		StrafeRight();
	}else{
		Robot::chassis->sideEn->Reset();
		StrafeLeft();
	}
}

void AutonomousCommand::StrafeLeft() {
	if(counter<4) {
		Robot::chassis->sideDrive->Set(1);
		if(Robot::chassis->sideEn->Get()>500||Robot::chassis->sideEn->Get()<-500) {
			Robot::chassis->sideDrive->Set(0);
			Center();
		} else {
			StrafeLeft();
		}
	}

}

void AutonomousCommand::StrafeRight() {
	if(counter<4) {
		Robot::chassis->sideDrive->Set(-1);
		if(Robot::chassis->sideEn->Get()>500||Robot::chassis->sideEn->Get()<-500) {
			Robot::chassis->sideDrive->Set(0);
			Center();
		} else {
			StrafeRight();
		}
	}
}

void AutonomousCommand::Center() {
	if(centerdistance<-5) {
		Robot::chassis->sideDrive->Set(1);
	}
	if(centerdistance>5) {
		Robot::chassis->sideDrive->Set(-1);
	}
	if(5>centerdistance&&centerdistance>-5) {
		GoForeward();
	} else {
		Center();
	}
}

// Make this return true when this Command no longer needs to run execute()
bool AutonomousCommand::IsFinished() {
	return false;
}

// Called once after isFinished returns true
void AutonomousCommand::End() {
	
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AutonomousCommand::Interrupted() {

}
