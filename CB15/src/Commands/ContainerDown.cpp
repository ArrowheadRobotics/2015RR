// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "ContainerDown.h"
#include "../RobotMap.h"
#include "../Constants.h"

ContainerDown::ContainerDown() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	initPot = 0; //Stores the pot value at the start of the command
}

// Called just before this Command runs the first time
void ContainerDown::Initialize() {
	//initPot = RobotMap::containerElevatorelevatePot->GetValue(); //Stores the starting pot value
	Robot::containerElevator->clawElevator->Set(-0.5f);
}

// Called repeatedly when this Command is scheduled to run
void ContainerDown::Execute() {
	//RobotMap::containerElevatorclawElevator->Set(-0.25); //Drive the motor backwards
}

// Make this return true when this Command no longer needs to run execute()
bool ContainerDown::IsFinished() {
	//if(RobotMap::containerElevatorlimitBottom->Get()||initPot-RobotMap::containerElevatorelevatePot->GetValue()>kPOT_LIFT_DIFFERENCE) { //If the lift hits the bottom or has gone the length of a tote, stop
		//return true;
	//}
	//else {
		//return false; //Otherwise, keep going
	//}

	if (!(Robot::containerElevator->limitBottom->Get())) {
		Robot::containerElevator->clawElevator->Set(0);
		return true;
	}
	else {
		return false;
	}
}

// Called once after isFinished returns true
void ContainerDown::End() {
	Robot::containerElevator->clawElevator->Set(0); //Stop the motor when the command ends
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void ContainerDown::Interrupted() {
	Robot::containerElevator->clawElevator->Set(0);
}
