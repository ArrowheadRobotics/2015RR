// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Drive.h"
#include "../Constants.h"

Drive::Drive() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::chassis);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

// Called just before this Command runs the first time
void Drive::Initialize() {
	// Call move function
	Robot::chassis->Move(Robot::oi->getleftJoy(),Robot::oi->getrightJoy());
	//printf("JoyVal: %f\n",Robot::oi->getleftJoy()->GetZ());
	//printf("SpdVal: = %f  ", Robot::toteElevator->spdVal);
	//printf("Limit Bottom = %d  ", Robot::containerElevator->limitBottom->Get());
	//printf("Pivot Pot: %d  Tote Pot: %d  Container Pot: %d\n",Robot::containerElevator->pivotPot->GetValue(),Robot::toteElevator->totePot->GetValue(),Robot::containerElevator->elevatePot->GetValue());
	if((Robot::toteElevator->totePot->GetValue()>kTOTEBOTTOM) && (Robot::oi->getgamePad()->GetAxis(Robot::oi->getgamePad()->kYAxis)>0))
	{
		Robot::toteElevator->toteDrive->Set(Robot::toteElevator->spdVal);
		//printf("Bottom\n");
	}
	else if((Robot::toteElevator->totePot->GetValue()<kTOTETOP) && (Robot::oi->getgamePad()->GetAxis(Robot::oi->getgamePad()->kYAxis)<0))
	{
		Robot::toteElevator->toteDrive->Set(Robot::toteElevator->spdVal);
		//printf("Top\n");
	}
	else
	{
		Robot::toteElevator->toteDrive->Set(-1*Robot::oi->getgamePad()->GetAxis(Robot::oi->getgamePad()->kYAxis)+Robot::toteElevator->spdVal);
		//printf("Drive\n");
	}
}

// Called repeatedly when this Command is scheduled to run
void Drive::Execute() {
	
}

// Make this return true when this Command no longer needs to run execute()
bool Drive::IsFinished() {
	return true;
}

// Called once after isFinished returns true
void Drive::End() {
	
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void Drive::Interrupted() {

}
