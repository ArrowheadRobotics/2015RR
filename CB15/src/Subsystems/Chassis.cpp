// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Chassis.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/Drive.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

Chassis::Chassis() : Subsystem("Chassis") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	leftDrive = RobotMap::chassisleftDrive;
	rightDrive = RobotMap::chassisrightDrive;
	sideDrive = RobotMap::chassissideDrive;
	rightEn = RobotMap::chassisrightEn;
	leftEn = RobotMap::chassisleftEn;
	sideEn = RobotMap::chassissideEn;
	gyro = RobotMap::chassisgyro;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	yPosLeft = 0;
	yPosRight = 0;
	xPos = 0;

	yStepLeft=0;
	yStepRight=0;
	xStep=0;


	stoppedRight = 0;
	stoppedLeft = 0;
	stoppedSide = 0;

	accelval = 15;

	t.Start(); //Start Timer t
	t.Reset(); //Set timer t to 0

	strafeSol1 = RobotMap::strafeAxisSol1;
	strafeSol2 = RobotMap::strafeAxisSol2;
}

    
void Chassis::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new Drive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

// Put methods for controlling this subsystem
// here. Call these from Commands.

void Chassis::Move(Joystick* leftJoy, Joystick* rightJoy) {

	yStepLeft = yPosLeft;
	yStepRight = yPosRight;
	xStep = xPos;


	//Smoothing algorithms to avoid full acceleration to the joystick's location

	yPosLeft = (leftJoy->GetY() + (accelval * yStepLeft))/(accelval + 1); //Finds average of the previous cycle's speed and joystick's location with weight on the previous speed
	yStepLeft = yPosLeft; //Sets last cycle's speed to desired position
	if(abs((leftJoy->GetY())-yPosLeft)<.5 && (t.Get() - stoppedLeft) > .25)  { //Makes sure the last cycle hits joystick's position when it gets close
		yStepLeft = leftJoy->GetY(); //Sets last cycle's speed to joystick's location
		stoppedLeft = t.Get(); //Sets stoppedLeft to time from timer t
	}

	yPosRight = (rightJoy->GetY() + (accelval * yStepRight))/(accelval + 1); //Finds average of the previous cycle's speed and joystick's location with weight on the previous speed
	yStepRight = yPosRight; //Sets last cycle's speed to desired position
	if(abs((rightJoy->GetY())-yPosRight)<.5 && (t.Get() - stoppedRight) > .25)  { //Makes sure the last cycle hits joystick's position when it gets close
		yStepRight = rightJoy->GetY();  //Sets last cycle's speed to joystick's location
		stoppedRight = t.Get(); //Sets stoppedRight to time from timer t
	}

	xPos = (leftJoy->GetX() + (accelval * xStep))/(accelval + 1); //Finds average of the previous cycle's speed and joystick's location with weight on the previous speed
	xStep = xPos; //Sets last cycle's speed to desired position
	if(abs((leftJoy->GetX())-xPos)<.5 && (t.Get() - stoppedSide) > .25)  {//Makes sure the last cycle hits joystick's position when it gets close
		xStep = leftJoy->GetX(); //Sets last cycle's speed to joystick's location
		stoppedSide = t.Get(); //Set's stoppedSide to time from timer t
	}

	Robot::chassis->leftDrive->Set(yPosLeft);
	Robot::chassis->rightDrive->Set(-1*yPosRight);
	Robot::chassis->sideDrive->Set(xPos);
}


