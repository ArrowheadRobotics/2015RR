// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "ToteElevator.h"
#include "../RobotMap.h"
#include "../Constants.h"
#include "../Commands/LiftMove.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

ToteElevator::ToteElevator() : Subsystem("ToteElevator") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	toteDrive = RobotMap::toteElevatortoteDrive;
	totePot = RobotMap::toteElevatortotePot;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	setpoint = totePot->GetValue();
	integral = 0;
	error = 0;
	derivative = 0;
	lastError = 0;
	tE.Start();
	tE.Reset();
	output = 0;

	limitTop = RobotMap::toteElevatorlimitTop;
	limitBottom = RobotMap::toteElevatorlimitBottom;
}
    
void ToteElevator::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new LiftMove());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void ToteElevator::PIDLiftControl() {
	if(tE.Get()>TOTE_ELEVATOR_DT) {
		error = setpoint-totePot->GetValue();
		integral+=(error*TOTE_ELEVATOR_DT);
		derivative = (error-lastError)/TOTE_ELEVATOR_DT;
		output = (TOTE_ELEVATOR_KP*error)+(TOTE_ELEVATOR_KI*integral)+(TOTE_ELEVATOR_KD*derivative);
		toteDrive->Set(output);
		lastError = error;
		tE.Reset();
	}
}
