// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
#include "Constants.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
SpeedController* RobotMap::chassisleftDrive = NULL;
SpeedController* RobotMap::chassisrightDrive = NULL;
SpeedController* RobotMap::chassissideDrive = NULL;
Encoder* RobotMap::chassisrightEn = NULL;
Encoder* RobotMap::chassisleftEn = NULL;
Encoder* RobotMap::chassissideEn = NULL;
//Gyro* RobotMap::chassisgyro = NULL;
SpeedController* RobotMap::toteElevatortoteDrive = NULL;
AnalogInput* RobotMap::toteElevatortotePot = NULL;
DoubleSolenoid* RobotMap::containerElevatorclawSol = NULL;
SpeedController* RobotMap::containerElevatorclawPivot = NULL;
SpeedController* RobotMap::containerElevatorclawElevator = NULL;
DigitalInput* RobotMap::containerElevatorlimitTop = NULL;
DigitalInput* RobotMap::containerElevatorlimitBottom = NULL;
AnalogInput* RobotMap::containerElevatorpivotPot = NULL;
AnalogInput* RobotMap::containerElevatorelevatePot = NULL;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
DigitalInput* RobotMap::toteElevatorlimitTop = NULL;
DigitalInput* RobotMap::toteElevatorlimitBottom = NULL;
DoubleSolenoid* RobotMap::strafeAxisSol = NULL;
BuiltInAccelerometer* RobotMap::accel = NULL;

void RobotMap::init() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();

	chassisleftDrive = new Talon(pLeftDrive);
	lw->AddActuator("Chassis", "leftDrive", (Talon*) chassisleftDrive);
	
	chassisrightDrive = new Talon(pRightDrive);
	lw->AddActuator("Chassis", "rightDrive", (Talon*) chassisrightDrive);
	
	chassissideDrive = new Talon(pSideDrive);
	lw->AddActuator("Chassis", "sideDrive", (Talon*) chassissideDrive);
	
	chassisrightEn = new Encoder(pRightEncoderA, pRightEncoderB, false, Encoder::k4X);
	lw->AddSensor("Chassis", "rightEn", chassisrightEn);
		chassisrightEn->SetDistancePerPulse(1.0);
    chassisrightEn->SetPIDSourceParameter(Encoder::kRate);

	chassisleftEn = new Encoder(pLeftEncoderA, pLeftEncoderB, false, Encoder::k4X);
	lw->AddSensor("Chassis", "leftEn", chassisleftEn);
	chassisleftEn->SetDistancePerPulse(1.0);
        chassisleftEn->SetPIDSourceParameter(Encoder::kRate);

	chassissideEn = new Encoder(pSideEncoderA, pSideEncoderB, false, Encoder::k4X);
	lw->AddSensor("Chassis", "sideEn", chassissideEn);
	chassissideEn->SetDistancePerPulse(1.0);
        chassissideEn->SetPIDSourceParameter(Encoder::kRate);

//	chassisgyro = new Gyro(pGyro);
//	lw->AddSensor("Chassis", "gyro", chassisgyro);
//	chassisgyro->SetSensitivity(0.007);

	toteElevatortoteDrive = new Talon(pToteElevator);
	lw->AddActuator("ToteElevator", "toteDrive", (Talon*) toteElevatortoteDrive);
	
	toteElevatortotePot = new AnalogInput(pTotePot);

	containerElevatorclawSol = new DoubleSolenoid(pClawSolenoidA, pClawSolenoidB);
	lw->AddActuator("ContainerElevator", "clawSol1", containerElevatorclawSol);
	
	containerElevatorclawPivot = new Talon(pClawPivot);
	lw->AddActuator("ContainerElevator", "clawPivot", (Talon*) containerElevatorclawPivot);
	
	containerElevatorclawElevator = new Talon(pContainerElevator);
	lw->AddActuator("ContainerElevator", "clawElevator", (Talon*) containerElevatorclawElevator);
	
	containerElevatorlimitTop = new DigitalInput(pContainerElevatorLimitTop);
	lw->AddSensor("ContainerElevator", "limitTop", containerElevatorlimitTop);
	
	containerElevatorlimitBottom = new DigitalInput(pContainerElevatorLimitBottom);
	lw->AddSensor("ContainerElevator", "limitBottom", containerElevatorlimitBottom);
	
	containerElevatorpivotPot = new AnalogInput(pElevatorPivotPot);
	containerElevatorelevatePot = new AnalogInput(pElevatorHeightPot);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

	toteElevatorlimitBottom = new DigitalInput(pToteElevatorLimitBottom);
	lw->AddSensor("ToteElevator", "limitBottom", toteElevatorlimitBottom);

	toteElevatorlimitTop = new DigitalInput(pToteElevatorLimitTop);
	lw->AddSensor("ToteElevator", "limitTop", toteElevatorlimitTop);

	strafeAxisSol = new DoubleSolenoid(pStrafeSolenoidA, pStrafeSolenoidB);
	lw->AddActuator("Chassis", "strafeAxisSol1", strafeAxisSol);

	accel = new BuiltInAccelerometer(Accelerometer::kRange_8G);

}
