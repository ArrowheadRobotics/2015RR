// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"
#include "JoystickMap.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/BLANK.h"
#include "Commands/ClawToggle.h"
#include "Commands/ContainerDown.h"
#include "Commands/ContainerUp.h"
#include "Commands/Drive.h"
#include "Commands/LiftDown.h"
#include "Commands/LiftUp.h"
#include "Commands/PivotDown.h"
#include "Commands/PivotUp.h"


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "Commands/LiftMove.h"
#include "Commands/SetpointReset.h"
#include "Commands/StrafeAxisToggle.h"

OI::OI() {
	// Process operator interface input here.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

	gamePad = new Joystick(2);
	
	rightJoy = new Joystick(1);
	
	leftJoy = new Joystick(0);
	
     

        // SmartDashboard Buttons
	SmartDashboard::PutData("Autonomous Command", new AutonomousCommand());

	SmartDashboard::PutData("Drive", new Drive());

	SmartDashboard::PutData("LiftUp", new LiftUp());

	SmartDashboard::PutData("LiftDown", new LiftDown());

	SmartDashboard::PutData("PivotUp", new PivotUp());

	SmartDashboard::PutData("PivotDown", new PivotDown());

	SmartDashboard::PutData("ContainerUp", new ContainerUp());

	SmartDashboard::PutData("ContainerDown", new ContainerDown());

	SmartDashboard::PutData("ClawToggle", new ClawToggle());

	SmartDashboard::PutData("BLANK", new BLANK());


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

	//Tote Elevator buttons
	toteUpBtn = new JoystickButton(gamePad, BBUTTON);
	toteUpBtn->WhileHeld(new LiftUp());
	toteDownBtn = new JoystickButton(gamePad, ABUTTON);
	toteDownBtn->WhileHeld(new LiftDown());
	//Container Elevator buttons
	clawBtn = new JoystickButton(gamePad, LEFTBUMPER);
	clawBtn->WhenPressed(new ClawToggle());
	conUpBtn = new JoystickButton(gamePad, YBUTTON);
	conUpBtn->WhileHeld(new ContainerUp());
	conDownBtn = new JoystickButton(gamePad, XBUTTON);
	conDownBtn->WhileHeld(new ContainerDown());
	pivotTopBtn = new JoystickButton(gamePad, BACKBUTTON);
	pivotTopBtn->WhileHeld(new PivotUp());
	pivotBottomBtn = new JoystickButton(gamePad, STARTBUTTON);
	pivotBottomBtn->WhileHeld(new PivotDown());
	//Lift Elevator Button:
	setpointBtn = new JoystickButton(gamePad, YBUTTON);
	setpointBtn->WhenPressed(new SetpointReset());
	strafeBtn = new JoystickButton(leftJoy, 2);
	strafeBtn->WhenPressed(new StrafeAxisToggle());
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

Joystick* OI::getgamePad() {
	return gamePad;
}

Joystick* OI::getrightJoy() {
	return rightJoy;
}

Joystick* OI::getleftJoy() {
	return leftJoy;
}


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
